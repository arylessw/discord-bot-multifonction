module.exports = {
  name: 'setprefix',
  description: 'Configure le pr√©fixe du bot',
  async execute(message, args, client) {
    if (!message.guild) {
      return message.reply({
        embeds: [{
          title: '‚ùå Erreur',
          description: 'Cette commande doit √™tre utilis√©e dans un serveur.',
          color: 0xff0000,
          timestamp: new Date()
        }]
      });
    }

    if (!message.member.permissions.has('Administrator')) {
      return message.reply({
        embeds: [{
          title: '‚ùå Permission manquante',
          description: 'Vous devez avoir la permission d\'administrateur pour utiliser cette commande.',
          color: 0xff0000,
          timestamp: new Date()
        }]
      });
    }

    // Si aucun argument n'est fourni, afficher le pr√©fixe actuel
    if (!args[0]) {
      const config = require('../../config/server_config.json');
      const currentPrefix = config[message.guild.id]?.prefix || client.config.prefix;
      
      return message.reply({
        embeds: [{
          title: '‚ÑπÔ∏è Pr√©fixe actuel',
          description: `Le pr√©fixe actuel est \`${currentPrefix}\`.`,
          color: 0x3498db,
          fields: [
            {
              name: 'üî§ Pr√©fixe',
              value: currentPrefix,
              inline: true
            },
            {
              name: '‚ÑπÔ∏è Information',
              value: 'Pour changer le pr√©fixe, utilisez cette commande suivi du nouveau pr√©fixe.',
              inline: false
            }
          ],
          timestamp: new Date()
        }]
      });
    }

    // Si l'argument est "reset", r√©initialiser le pr√©fixe
    if (args[0].toLowerCase() === 'reset') {
      const config = require('../../config/server_config.json');
      const oldPrefix = config[message.guild.id]?.prefix;
      
      if (!oldPrefix) {
        return message.reply({
          embeds: [{
            title: '‚ÑπÔ∏è Information',
            description: 'Le pr√©fixe n\'a pas √©t√© modifi√©.',
            color: 0x3498db,
            timestamp: new Date()
          }]
        });
      }

      delete config[message.guild.id].prefix;

      const fs = require('fs');
      fs.writeFileSync('./config/server_config.json', JSON.stringify(config, null, 2));

      const embed = {
        title: '‚úÖ Pr√©fixe r√©initialis√©',
        description: `Le pr√©fixe a √©t√© r√©initialis√© √† \`${client.config.prefix}\`.`,
        color: 0x00ff00,
        fields: [
          {
            name: 'üë§ Administrateur',
            value: message.author.tag,
            inline: true
          },
          {
            name: 'üîÑ Ancien pr√©fixe',
            value: oldPrefix,
            inline: true
          },
          {
            name: 'üî§ Nouveau pr√©fixe',
            value: client.config.prefix,
            inline: true
          }
        ],
        timestamp: new Date()
      };

      message.reply({ embeds: [embed] });

      // Envoyer un message dans le canal de logs si configur√©
      if (config[message.guild.id]?.logChannel) {
        const logChannel = message.guild.channels.cache.get(config[message.guild.id].logChannel);
        if (logChannel) {
          logChannel.send({ embeds: [embed] });
        }
      }

      return;
    }

    const newPrefix = args[0];
    if (!newPrefix) {
      return message.reply({
        embeds: [{
          title: '‚ùå Pr√©fixe non sp√©cifi√©',
          description: 'Veuillez sp√©cifier un nouveau pr√©fixe.',
          color: 0xff0000,
          timestamp: new Date()
        }]
      });
    }

    if (newPrefix.length > 5) {
      return message.reply({
        embeds: [{
          title: '‚ùå Pr√©fixe trop long',
          description: 'Le pr√©fixe ne peut pas d√©passer 5 caract√®res.',
          color: 0xff0000,
          timestamp: new Date()
        }]
      });
    }

    // V√©rifier si le pr√©fixe contient des caract√®res sp√©ciaux
    if (!/^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+$/.test(newPrefix)) {
      return message.reply({
        embeds: [{
          title: '‚ùå Pr√©fixe invalide',
          description: 'Le pr√©fixe ne peut contenir que des lettres, des chiffres et des caract√®res sp√©ciaux.',
          color: 0xff0000,
          timestamp: new Date()
        }]
      });
    }

    try {
      // Charger ou cr√©er la configuration
      const config = require('../../config/server_config.json');
      if (!config[message.guild.id]) {
        config[message.guild.id] = {};
      }

      const oldPrefix = config[message.guild.id].prefix || client.config.prefix;

      // Mettre √† jour la configuration
      config[message.guild.id].prefix = newPrefix;

      // Sauvegarder la configuration
      const fs = require('fs');
      fs.writeFileSync('./config/server_config.json', JSON.stringify(config, null, 2));

      const embed = {
        title: '‚úÖ Pr√©fixe configur√©',
        description: `Le pr√©fixe a √©t√© configur√© sur \`${newPrefix}\`.`,
        color: 0x00ff00,
        fields: [
          {
            name: 'üë§ Administrateur',
            value: message.author.tag,
            inline: true
          },
          {
            name: 'üîÑ Ancien pr√©fixe',
            value: oldPrefix,
            inline: true
          },
          {
            name: 'üî§ Nouveau pr√©fixe',
            value: newPrefix,
            inline: true
          }
        ],
        timestamp: new Date()
      };

      // Envoyer un message de confirmation
      message.reply({ embeds: [embed] });

      // Envoyer un message dans le canal de logs si configur√©
      if (config[message.guild.id]?.logChannel) {
        const logChannel = message.guild.channels.cache.get(config[message.guild.id].logChannel);
        if (logChannel) {
          logChannel.send({ embeds: [embed] });
        }
      }
    } catch (error) {
      console.error('Erreur setprefix:', error);
      message.reply({
        embeds: [{
          title: '‚ùå Erreur',
          description: 'Une erreur est survenue lors de la configuration du pr√©fixe.',
          color: 0xff0000,
          timestamp: new Date()
        }]
      });
    }
  }
}; 